// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace mmbizapp {
class NewPackageData;
class NewPackageDataDefaultTypeInternal;
extern NewPackageDataDefaultTypeInternal _NewPackageData_default_instance_;
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
}  // namespace mmbizapp
PROTOBUF_NAMESPACE_OPEN
template<> ::mmbizapp::NewPackageData* Arena::CreateMaybeMessage<::mmbizapp::NewPackageData>(Arena*);
template<> ::mmbizapp::Person* Arena::CreateMaybeMessage<::mmbizapp::Person>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mmbizapp {

// ===================================================================

class NewPackageData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mmbizapp.NewPackageData) */ {
 public:
  NewPackageData();
  virtual ~NewPackageData();

  NewPackageData(const NewPackageData& from);
  NewPackageData(NewPackageData&& from) noexcept
    : NewPackageData() {
    *this = ::std::move(from);
  }

  inline NewPackageData& operator=(const NewPackageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewPackageData& operator=(NewPackageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NewPackageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewPackageData* internal_default_instance() {
    return reinterpret_cast<const NewPackageData*>(
               &_NewPackageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NewPackageData* other);
  friend void swap(NewPackageData& a, NewPackageData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewPackageData* New() const final {
    return CreateMaybeMessage<NewPackageData>(nullptr);
  }

  NewPackageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewPackageData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NewPackageData& from);
  void MergeFrom(const NewPackageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NewPackageData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mmbizapp.NewPackageData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes body = 1;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 1;
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);

  // optional bytes data_ticket = 2;
  bool has_data_ticket() const;
  void clear_data_ticket();
  static const int kDataTicketFieldNumber = 2;
  const std::string& data_ticket() const;
  void set_data_ticket(const std::string& value);
  void set_data_ticket(std::string&& value);
  void set_data_ticket(const char* value);
  void set_data_ticket(const void* value, size_t size);
  std::string* mutable_data_ticket();
  std::string* release_data_ticket();
  void set_allocated_data_ticket(std::string* data_ticket);

  // optional bytes user_data_ticket = 3;
  bool has_user_data_ticket() const;
  void clear_user_data_ticket();
  static const int kUserDataTicketFieldNumber = 3;
  const std::string& user_data_ticket() const;
  void set_user_data_ticket(const std::string& value);
  void set_user_data_ticket(std::string&& value);
  void set_user_data_ticket(const char* value);
  void set_user_data_ticket(const void* value, size_t size);
  std::string* mutable_user_data_ticket();
  std::string* release_user_data_ticket();
  void set_allocated_user_data_ticket(std::string* user_data_ticket);

  // optional bytes openid = 4;
  bool has_openid() const;
  void clear_openid();
  static const int kOpenidFieldNumber = 4;
  const std::string& openid() const;
  void set_openid(const std::string& value);
  void set_openid(std::string&& value);
  void set_openid(const char* value);
  void set_openid(const void* value, size_t size);
  std::string* mutable_openid();
  std::string* release_openid();
  void set_allocated_openid(std::string* openid);

  // @@protoc_insertion_point(class_scope:mmbizapp.NewPackageData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_data_ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class Person :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mmbizapp.Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Person* other);
  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mmbizapp.Person";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 age = 2;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mmbizapp.Person)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  friend struct ::TableStruct_base_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewPackageData

// required bytes body = 1;
inline bool NewPackageData::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewPackageData::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NewPackageData::body() const {
  // @@protoc_insertion_point(field_get:mmbizapp.NewPackageData.body)
  return body_.GetNoArena();
}
inline void NewPackageData::set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmbizapp.NewPackageData.body)
}
inline void NewPackageData::set_body(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmbizapp.NewPackageData.body)
}
inline void NewPackageData::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmbizapp.NewPackageData.body)
}
inline void NewPackageData::set_body(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmbizapp.NewPackageData.body)
}
inline std::string* NewPackageData::mutable_body() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:mmbizapp.NewPackageData.body)
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewPackageData::release_body() {
  // @@protoc_insertion_point(field_release:mmbizapp.NewPackageData.body)
  if (!has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return body_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewPackageData::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:mmbizapp.NewPackageData.body)
}

// optional bytes data_ticket = 2;
inline bool NewPackageData::has_data_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewPackageData::clear_data_ticket() {
  data_ticket_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NewPackageData::data_ticket() const {
  // @@protoc_insertion_point(field_get:mmbizapp.NewPackageData.data_ticket)
  return data_ticket_.GetNoArena();
}
inline void NewPackageData::set_data_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_ticket_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmbizapp.NewPackageData.data_ticket)
}
inline void NewPackageData::set_data_ticket(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_ticket_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmbizapp.NewPackageData.data_ticket)
}
inline void NewPackageData::set_data_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_ticket_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmbizapp.NewPackageData.data_ticket)
}
inline void NewPackageData::set_data_ticket(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_ticket_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmbizapp.NewPackageData.data_ticket)
}
inline std::string* NewPackageData::mutable_data_ticket() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:mmbizapp.NewPackageData.data_ticket)
  return data_ticket_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewPackageData::release_data_ticket() {
  // @@protoc_insertion_point(field_release:mmbizapp.NewPackageData.data_ticket)
  if (!has_data_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_ticket_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewPackageData::set_allocated_data_ticket(std::string* data_ticket) {
  if (data_ticket != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_ticket_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_ticket);
  // @@protoc_insertion_point(field_set_allocated:mmbizapp.NewPackageData.data_ticket)
}

// optional bytes user_data_ticket = 3;
inline bool NewPackageData::has_user_data_ticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewPackageData::clear_user_data_ticket() {
  user_data_ticket_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NewPackageData::user_data_ticket() const {
  // @@protoc_insertion_point(field_get:mmbizapp.NewPackageData.user_data_ticket)
  return user_data_ticket_.GetNoArena();
}
inline void NewPackageData::set_user_data_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  user_data_ticket_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmbizapp.NewPackageData.user_data_ticket)
}
inline void NewPackageData::set_user_data_ticket(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  user_data_ticket_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmbizapp.NewPackageData.user_data_ticket)
}
inline void NewPackageData::set_user_data_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  user_data_ticket_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmbizapp.NewPackageData.user_data_ticket)
}
inline void NewPackageData::set_user_data_ticket(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  user_data_ticket_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmbizapp.NewPackageData.user_data_ticket)
}
inline std::string* NewPackageData::mutable_user_data_ticket() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:mmbizapp.NewPackageData.user_data_ticket)
  return user_data_ticket_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewPackageData::release_user_data_ticket() {
  // @@protoc_insertion_point(field_release:mmbizapp.NewPackageData.user_data_ticket)
  if (!has_user_data_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return user_data_ticket_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewPackageData::set_allocated_user_data_ticket(std::string* user_data_ticket) {
  if (user_data_ticket != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_data_ticket_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_data_ticket);
  // @@protoc_insertion_point(field_set_allocated:mmbizapp.NewPackageData.user_data_ticket)
}

// optional bytes openid = 4;
inline bool NewPackageData::has_openid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewPackageData::clear_openid() {
  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NewPackageData::openid() const {
  // @@protoc_insertion_point(field_get:mmbizapp.NewPackageData.openid)
  return openid_.GetNoArena();
}
inline void NewPackageData::set_openid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmbizapp.NewPackageData.openid)
}
inline void NewPackageData::set_openid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  openid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmbizapp.NewPackageData.openid)
}
inline void NewPackageData::set_openid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmbizapp.NewPackageData.openid)
}
inline void NewPackageData::set_openid(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmbizapp.NewPackageData.openid)
}
inline std::string* NewPackageData::mutable_openid() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:mmbizapp.NewPackageData.openid)
  return openid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewPackageData::release_openid() {
  // @@protoc_insertion_point(field_release:mmbizapp.NewPackageData.openid)
  if (!has_openid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return openid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewPackageData::set_allocated_openid(std::string* openid) {
  if (openid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  openid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:mmbizapp.NewPackageData.openid)
}

// -------------------------------------------------------------------

// Person

// optional string name = 1;
inline bool Person::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:mmbizapp.Person.name)
  return name_.GetNoArena();
}
inline void Person::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmbizapp.Person.name)
}
inline void Person::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmbizapp.Person.name)
}
inline void Person::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmbizapp.Person.name)
}
inline void Person::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmbizapp.Person.name)
}
inline std::string* Person::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:mmbizapp.Person.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:mmbizapp.Person.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mmbizapp.Person.name)
}

// optional int32 age = 2;
inline bool Person::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person::clear_age() {
  age_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::age() const {
  // @@protoc_insertion_point(field_get:mmbizapp.Person.age)
  return age_;
}
inline void Person::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  age_ = value;
  // @@protoc_insertion_point(field_set:mmbizapp.Person.age)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mmbizapp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_2eproto
